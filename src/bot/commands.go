package bot

import (
	"regexp"
	"strconv"
	"strings"

	"github.com/anaskhan96/soup"   // html parser
	"github.com/mmcdole/gofeed"    // Rss parser
	"gopkg.in/telegram-bot-api.v4" // Telegram api

	"userdb"	// –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	"logging" 	// –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
)


// start –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (bot *Bot) start(msg *tgbotapi.Message) {
	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := userdb.CreateUser(strconv.FormatInt(msg.Chat.ID, 10))
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/start",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, "–ü—Ä–∏–≤–µ—Ç, "+msg.Chat.UserName+"! –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
	message.ReplyMarkup = createKeyboard()
	bot.send(message)
}


// startMailout –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
func (bot *Bot) startMailout(command userCommand) {
	msg := command.message
	site := command.site

	var err error
	if site == habr {
		err = userdb.StartMailout(strconv.FormatInt(msg.Chat.ID, 10), habr)
	} else if site == geek {
		err = userdb.StartMailout(strconv.FormatInt(msg.Chat.ID, 10), geek)
	}

	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/start_mailout",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è " + site}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è "+site+" –≤–∫–ª—é—á–µ–Ω–∞")
	bot.send(message)
}


// stopMailout –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (bot *Bot) stopMailout(command userCommand) {
	msg := command.message
	site := command.site

	var err error
	if site == habr {
		err = userdb.StopMailout(strconv.FormatInt(msg.Chat.ID, 10), habr)
	} else if site == geek {
		err = userdb.StopMailout(strconv.FormatInt(msg.Chat.ID, 10), geek)
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...stop",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è " + site}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	bot.send(message)
}


// help –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func (bot *Bot) help(msg *tgbotapi.Message) {
	message := tgbotapi.NewMessage(msg.Chat.ID, helpText)
	message.ParseMode = "HTML"
	bot.send(message)
}


// getStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
func (bot *Bot) getStatus(command userCommand) {
	msg := command.message
	site := command.site

	user, err := userdb.GetUser(strconv.FormatInt(msg.Chat.ID, 10))
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	var tags []string
	if site == habr {
		tags = user.HabrTags
	} else if site == geek {
		tags = user.GeekTags
	}

	var text string
	if len(tags) == 0 {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
	} else {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
		text += strings.Join(tags, "\n* ")
	}

	text += "\n\nüì¨ –†–∞—Å—Å—ã–ª–∫–∞: "

	if site == habr {
		if user.HabrMailout {
			text += "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
		} else {
			text += "–Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
		}
	} else if site == geek {
		if user.GeekMailout {
			text += "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
		} else {
			text += "–Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
		}
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.send(message)
}


// addTags –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func (bot *Bot) addTags(command userCommand) {
	msg := command.message
	site := command.site

	newTags := strings.Split(strings.ToLower(msg.CommandArguments()), " ")
	if len(newTags) == 0 {
		logging.SendErrorToUser("—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", bot.botAPI, msg.Chat.ID)
		return
	}

	var updatedTags []string
	var err error
	if site == habr {
		updatedTags, err = userdb.AddUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr, newTags)
	} else if site == geek {
		updatedTags, err = userdb.AddUserTags(strconv.FormatInt(msg.Chat.ID, 10), geek, newTags)
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...add_tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	var text string
	if len(updatedTags) == 0 {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
	} else {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
		text += strings.Join(updatedTags, "\n* ")
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.send(message)
}


// delTags —É–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func (bot *Bot) delTags(command userCommand) {
	msg := command.message
	site := command.site

	tagsForDel := strings.Split(strings.ToLower(msg.CommandArguments()), " ")
	if len(tagsForDel) == 0 {
		logging.SendErrorToUser("—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", bot.botAPI, msg.Chat.ID)
		return
	}

	var updatedTags []string
	var err error
	if site == habr {
		updatedTags, err = userdb.DelUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr, tagsForDel)
	} else if site == geek {
		updatedTags, err = userdb.DelUserTags(strconv.FormatInt(msg.Chat.ID, 10), geek, tagsForDel)
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...del_tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	var text string
	if len(updatedTags) == 0 {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
	} else {
		text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
		text += strings.Join(updatedTags, "\n* ")
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.send(message)
}


// delAllTags –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (bot *Bot) delAllTags(command userCommand) {
	msg := command.message
	site := command.site

	var err error
	if site == habr {
		err = userdb.DelAllUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr)
	} else if site == geek {
		err = userdb.DelAllUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr)
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...del_all_tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –æ—á–∏—â–µ–Ω")
	bot.send(message)
}


// copyTags –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Habrahabr
func (bot *Bot) copyTags(command userCommand) {
	msg := command.message
	site := command.site

	userURL := msg.CommandArguments()
	var res bool
	switch site {
	case habr:
		{
			res, _ = regexp.MatchString(habrUserRegexPattern, userURL)
		}
	case geek:
		{
			res, _ = regexp.MatchString(geekUserRegexPattern, userURL)
		}
	}
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if !res {
		logging.SendErrorToUser("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏", bot.botAPI, msg.Chat.ID)
		return
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞
	resp, err := soup.Get(userURL)
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...copy_tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	var userTags []string

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
	doc := soup.HTMLParse(resp)
	tags := doc.FindAll("li", "rel", "hub-popover")
	for _, tagNode := range tags {
		res := tagNode.Find("a")
		tag := res.Text()
		tag = strings.ToLower(tag)
		tag = strings.Replace(tag, " ", "_", -1)
		userTags = append(userTags, tag)
	}
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–ª–æ–≥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
	tags = doc.FindAll("div", "class", "media-obj__body media-obj__body_list-view list-snippet")
	for _, tagNode := range tags {
		res := tagNode.Find("a")

		tag := "–ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ " + res.Text()
		tag = strings.ToLower(tag)
		tag = strings.Replace(tag, " ", "_", -1)
		userTags = append(userTags, tag)
	}

	if len(userTags) == 0 {
		logging.SendErrorToUser("–±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ 0 —Ç–µ–≥–æ–≤. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ", bot.botAPI, msg.Chat.ID)
		return
	}

	switch site {
		case habr: {
			err = userdb.UpdateTags(strconv.FormatInt(msg.Chat.ID, 10), habr, userTags)
		}
		case geek: {
			err = userdb.UpdateTags(strconv.FormatInt(msg.Chat.ID, 10), habr, userTags)
		}
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...copy_tags",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–≥–∏"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	text := "–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* " + strings.Join(userTags, "\n* ")
	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.send(message)
}


// sendIV –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø—Ä–∏—Å–ª–∞–ª, –≤ –≤–∏–¥–µ InstantView
func (bot *Bot) sendIV(command userCommand) {
	habrRegexpPattern, _ := regexp.Compile(habrArticleRegexPattern)
	geekRegexpPattern, _ := regexp.Compile(geekArticleRegexPattern)

	msg := command.message
	site := command.site

	var link, instantViewURL string
	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø–∞–ª–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, —Å—Å—ã–ª–∫–∞ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
	switch site {
		case habr: {
			link = habrRegexpPattern.FindString(msg.Text)
			instantViewURL = formatString(habrInstantViewURL, map[string]string{"url": link})
		}
		case geek: {
			link = geekRegexpPattern.FindString(msg.Text)
			instantViewURL = formatString(geekInstantViewURL, map[string]string{"url": link})
		}
	}

	text := "<a href=\"" + instantViewURL + "\">InstantView</a>\n\n" +
			"<a href=\"" + link + "\">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ</a>\n\n" +
			"<a href=\"" + link + "#comments\">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º</a>"

	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	message.ParseMode = "HTML"
	bot.send(message)
}


// getBest –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.
// –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é ‚Äì 5, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ - –¥—Ä—É–≥–æ–µ
func (bot *Bot) getBest(command userCommand) {
	msg := command.message
	site := command.site

	parser := gofeed.NewParser()
	var feed *gofeed.Feed

	var err error
	switch site {
	case habr:
		feed, err = parser.ParseURL(bestHabrArticlesURL)
	case geek:
		feed, err = parser.ParseURL(bestGeekArticlesURL)
	}
	if err != nil {
		data := logging.ErrorData{
			Error:    err,
			Username: msg.Chat.UserName,
			UserID:   msg.Chat.ID,
			Command:  "/...best",
			AddInfo:  "–ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RSS-–ª–µ–Ω—Ç—É"}
		logging.LogErrorAndNotify(data, bot.botAPI)
		return
	}

	bestArticles := "<b>–õ—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:</b>\n"
	limit := 5
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–æ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
	if msg.CommandArguments() != "" {
		temp, err := strconv.Atoi(msg.CommandArguments())
		if err == nil && temp > 0 {
			limit = temp
		}
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
	for i, item := range feed.Items {
		if i >= limit {
			break
		}
		number := strconv.Itoa(i + 1)
		bestArticles += number + ") " + formatString("<a href='{link}'>{title}</a>", map[string]string{"link": item.Link, "title": item.Title}) + "\n"
	}

	message := tgbotapi.NewMessage(msg.Chat.ID, bestArticles)
	message.ParseMode = "HTML"
	message.DisableWebPagePreview = true
	bot.send(message)
}


// handleKeyboard –≤–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (bot *Bot) showKeyboard(msg *tgbotapi.Message) {
	message := tgbotapi.NewMessage(msg.Chat.ID, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞")
	message.ReplyMarkup = createKeyboard()
	bot.send(message)
}


// hideKeyboard –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (bot *Bot) hideKeyboard(msg *tgbotapi.Message) {
	message := tgbotapi.NewMessage(msg.Chat.ID, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
	message.ReplyMarkup = tgbotapi.NewRemoveKeyboard(false)
	bot.send(message)
}